# ============================================
# Actual Budget + Claude AI PDF Importer
# Production Dockerfile for Fly.io
# ============================================

# Stage 1: Build
FROM node:20-bullseye AS builder

WORKDIR /app

# Install system dependencies
RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install -y openssl git && \
    rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn
COPY packages/sync-server/package.json ./packages/sync-server/
COPY packages/loot-core/package.json ./packages/loot-core/
COPY packages/desktop-client/package.json ./packages/desktop-client/
COPY packages/crdt/package.json ./packages/crdt/
COPY packages/component-library/package.json ./packages/component-library/
COPY packages/api/package.json ./packages/api/
COPY anthropic-pdf-agent/package.json ./anthropic-pdf-agent/

# Install dependencies (allow lockfile updates for build)
RUN yarn install

# Copy source code
COPY . .

# Build browser application (loot-core + web client)
RUN export NODE_OPTIONS="--max-old-space-size=4096" && \
    yarn workspace loot-core build:browser && \
    yarn workspace @actual-app/web build:browser

# Build sync server
RUN yarn workspace @actual-app/sync-server build && \
    cp -r packages/sync-server/src/sql packages/sync-server/build/src/sql

# Install Anthropic Agent Server dependencies (uses npm, not yarn)
RUN cd anthropic-pdf-agent && npm ci

# ============================================
# Stage 2: Production Runtime
FROM node:20-bullseye-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update -y && \
    apt-get install -y openssl tini && \
    rm -rf /var/lib/apt/lists/*

# Copy built artifacts from builder - recreate proper structure
# The sync server expects @actual-app/web to be resolvable
COPY --from=builder /app/packages/sync-server/build ./packages/sync-server/build
COPY --from=builder /app/packages/desktop-client/build ./packages/desktop-client/build

# CRITICAL FIX: Copy root node_modules for hoisted dependencies (like 'migrate')
# Yarn workspaces uses hoisting, so dependencies are in /app/node_modules, not package-specific node_modules
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json
COPY --from=builder /app/.yarnrc.yml ./.yarnrc.yml

COPY --from=builder /app/packages/sync-server/package.json ./packages/sync-server/package.json
COPY --from=builder /app/packages/desktop-client/package.json ./packages/desktop-client/package.json
# Create node_modules symlink for @actual-app/web
RUN mkdir -p /app/packages/sync-server/node_modules/@actual-app && \
    ln -s /app/packages/desktop-client /app/packages/sync-server/node_modules/@actual-app/web

# Copy Anthropic Agent Server
COPY --from=builder /app/anthropic-pdf-agent ./anthropic-pdf-agent

# Create data directory
RUN mkdir -p /data && chmod 777 /data

# Create startup script
COPY <<'EOF' /app/start.sh
#!/bin/bash

echo "🚀 Starting Actual Budget with Claude AI PDF Importer"

# Start Anthropic Agent Server in background
echo "📡 Starting Anthropic Agent Server on port 4000..."
cd /app/anthropic-pdf-agent || exit 1
node server.js > /tmp/agent-server.log 2>&1 &
AGENT_PID=$!
echo "Agent server started with PID: $AGENT_PID"

# Ensure agent server is killed when script exits
trap "echo 'Stopping agent server...'; kill $AGENT_PID 2>/dev/null || true" EXIT

# Wait for Agent Server to be ready
echo "⏳ Waiting for Agent Server..."
sleep 5

# Start Actual Budget Sync Server
# CRITICAL: Run from /app (not /app/packages/sync-server/build) so Node.js can find /app/node_modules
echo "💰 Starting Actual Budget Sync Server on port 5006..."
cd /app || exit 1
exec node packages/sync-server/build/app.js
EOF

RUN chmod +x /app/start.sh

# Expose ports
EXPOSE 5006 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s \
  CMD node -e "require('http').get('http://localhost:5006/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"

# Use tini to handle signals properly
ENTRYPOINT ["/usr/bin/tini", "--"]

# Start both servers
CMD ["/app/start.sh"]
