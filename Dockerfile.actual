# ============================================
# Actual Budget with PDF Import Support
# Production Dockerfile for Fly.io
# ============================================

# Stage 1: Build
FROM node:20-bullseye AS builder

WORKDIR /app

# Install system dependencies
RUN apt-get update -y && \
    apt-get upgrade -y && \
    apt-get install -y openssl git && \
    rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package.json yarn.lock .yarnrc.yml ./
COPY .yarn ./.yarn
COPY packages/sync-server/package.json ./packages/sync-server/
COPY packages/loot-core/package.json ./packages/loot-core/
COPY packages/desktop-client/package.json ./packages/desktop-client/
COPY packages/crdt/package.json ./packages/crdt/
COPY packages/component-library/package.json ./packages/component-library/
COPY packages/api/package.json ./packages/api/

# Install dependencies
RUN yarn install

# Copy source code
COPY . .

# Build browser application (loot-core + web client)
RUN export NODE_OPTIONS="--max-old-space-size=4096" && \
    yarn workspace loot-core build:browser && \
    yarn workspace @actual-app/web build:browser

# Build sync server and copy SQL files
RUN yarn workspace @actual-app/sync-server build && \
    cp -r packages/sync-server/src/sql packages/sync-server/build/src/sql

# ============================================
# Stage 2: Production Runtime
FROM node:20-bullseye-slim

WORKDIR /app

# Install runtime dependencies
RUN apt-get update -y && \
    apt-get install -y openssl tini && \
    rm -rf /var/lib/apt/lists/*

# Copy built artifacts - recreate proper structure
COPY --from=builder /app/packages/sync-server/build ./packages/sync-server/build
COPY --from=builder /app/packages/desktop-client/build ./packages/desktop-client/build
COPY --from=builder /app/packages/sync-server/node_modules ./packages/sync-server/node_modules
COPY --from=builder /app/packages/sync-server/package.json ./packages/sync-server/package.json
COPY --from=builder /app/packages/desktop-client/package.json ./packages/desktop-client/package.json

# Create node_modules symlink for @actual-app/web
RUN mkdir -p /app/packages/sync-server/node_modules/@actual-app && \
    ln -s /app/packages/desktop-client /app/packages/sync-server/node_modules/@actual-app/web

# Create data directory
RUN mkdir -p /data && chmod 777 /data

# Expose sync server port
EXPOSE 5006

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s \
  CMD node -e "require('http').get('http://localhost:5006/health', (r) => r.statusCode === 200 ? process.exit(0) : process.exit(1))"

# Use tini to handle signals
ENTRYPOINT ["/usr/bin/tini", "--"]

# Start sync server
CMD ["node", "/app/packages/sync-server/build/app.js"]
